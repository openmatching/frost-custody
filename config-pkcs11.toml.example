# FROST MPC Node Configuration with PKCS#11 HSM
#
# This example shows how to use hardware-backed key storage via PKCS#11 standard
# Build with: cargo build --release --features pkcs11
#
# PKCS#11 works with ANY compliant device:
# - YubiKey, Nitrokey, OnlyKey (USB tokens)
# - Thales, Utimaco, Gemalto (Enterprise HSM)
# - AWS CloudHSM, Azure Key Vault (Cloud HSM)
# - SoftHSM (software testing)

[network]
type = "testnet"

[server]
role = "node"
host = "0.0.0.0"
port = 4000

[node]
index = 0
storage_path = "./data/frost-node0"
max_signers = 3
min_signers = 2

# ============================================================================
# PKCS#11 Configuration
# ============================================================================

[node.key_provider]
type = "pkcs11"

# PKCS#11 Library Path (vendor-specific)
# Choose the library for your device:

# YubiKey (USB token, $55)
pkcs11_library = "/usr/lib/libykcs11.so"
# macOS: "/usr/local/lib/libykcs11.dylib"
# Windows: "C:\\Program Files\\Yubico\\Yubico PIV Tool\\bin\\libykcs11.dll"

# SoftHSM (software testing, free)
# pkcs11_library = "/usr/lib/softhsm/libsofthsm2.so"

# Thales (nCipher) HSM (enterprise)
# pkcs11_library = "/opt/nfast/toolkits/pkcs11/libcknfast.so"

# AWS CloudHSM
# pkcs11_library = "/opt/cloudhsm/lib/libcloudhsm_pkcs11.so"

# Azure Key Vault (via PKCS#11 provider)
# pkcs11_library = "/usr/lib/azurekv/libazurekv_pkcs11.so"

# Nitrokey (USB token)
# pkcs11_library = "/usr/lib/libnitrokey.so"

# ============================================================================
# Token Configuration
# ============================================================================

# Slot number (usually 0 for first device)
slot = 0

# PIN - NEVER hardcode in production!
# Read from environment variable:
# export HSM_PIN="your-pin"
# Then use: pin = "${HSM_PIN}"
pin = "123456"  # Change this!

# Key label (identifier for your key on the device)
# Must match the certificate CN or key label on the device
key_label = "frost-node-0"
