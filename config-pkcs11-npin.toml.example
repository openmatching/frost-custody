# FROST MPC Node Configuration with PKCS#11 (No PIN in config)
#
# SECURITY BEST PRACTICE: Don't store PIN in config file
# Instead, unlock via API after startup
#
# Build with: cargo build --release (PKCS#11 enabled by default)

[network]
type = "testnet"

[server]
role = "node"
host = "0.0.0.0"
port = 4000

[node]
index = 0
storage_path = "./data/frost-node0"
max_signers = 3
min_signers = 2

# ============================================================================
# PKCS#11 Configuration WITHOUT PIN (Recommended for Production)
# ============================================================================

[node.key_provider]
type = "pkcs11"

# Device library path
pkcs11_library = "/usr/lib/libykcs11.so"  # YubiKey
# pkcs11_library = "/usr/lib/softhsm/libsofthsm2.so"  # SoftHSM
# pkcs11_library = "/opt/nfast/toolkits/pkcs11/libcknfast.so"  # Thales

slot = 0

# NO PIN in config! (security best practice)
# pin field is omitted - HSM starts in LOCKED state

key_label = "frost-node-0"

# ============================================================================
# How to Use
# ============================================================================
#
# 1. Start service (HSM is LOCKED)
#    cargo run --release
#
# 2. Unlock HSM via API (PIN sent over secure channel)
#    curl -X POST http://localhost:4000/api/hsm/unlock \
#      -H "Content-Type: application/json" \
#      -d '{"pin": "123456"}'
#
# 3. Check status
#    curl http://localhost:4000/api/hsm/status
#    {"locked": false, "provider_type": "PKCS#11 HSM (...)"}
#
# 4. Use normally (DKG, signing, etc.)
#    curl -X POST http://localhost:9000/api/address/generate \
#      -d '{"chain": "bitcoin", "passphrase": "uuid"}'
#
# 5. Lock when done (clears PIN from memory)
#    curl -X POST http://localhost:4000/api/hsm/lock
#
# ============================================================================
# Security Benefits
# ============================================================================
#
# ✅ No PIN in config file or environment variables
# ✅ PIN sent via API (can use HTTPS/mTLS)
# ✅ Machine stolen = HSM locked = attacker can't use it
# ✅ PIN only in memory during operations
# ✅ Can lock/unlock on demand
#
# ============================================================================
# Comparison
# ============================================================================
#
# With PIN in config:
#   - Convenient (auto-unlocks on startup)
#   - ⚠️ Config file stolen = attacker has PIN
#
# Without PIN in config (this file):
#   - Secure (PIN never on disk)
#   - ✅ Machine stolen = HSM useless without PIN
#   - Must unlock via API after restart

